{"ast":null,"code":"var _jsxFileName = \"/home/david/Documentos/GitHub/Desafio-Bridge-Full-Stack/client/src/App.js\";\nimport React, { Component } from 'react';\nimport bridge_logo from './bridge_logo.png';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      reqResponse: undefined,\n      numberValue: undefined,\n      results: [],\n      waitingResp: false\n    };\n\n    this.handleInputNumberChange = e => {\n      this.setState({\n        numberValue: e.target.value\n      });\n    };\n\n    this.handleSubmitButtonClick = () => {\n      this.setState({\n        waitingResp: true\n      });\n      this.submitNumber().then(res => this.setState(prevState => ({\n        results: [...prevState.results, res.express],\n        waitingResp: false\n      }))).catch(err => console.log(err));\n    };\n\n    this.submitNumber = async () => {\n      const response = await fetch('/api/divisors?number=' + this.state.numberValue);\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.renderTextField = () => {\n      if (this.state.numberValue >= 1e8) {\n        return React.createElement(TextField, {\n          error: true,\n          id: \"standard-error-helper-text\",\n          label: \"Erro\",\n          helperText: \"N\\xFAmero deve ser < 10^8.\",\n          onChange: this.handleInputNumberChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(TextField, {\n          id: \"standard-basic\",\n          label: \"Insira um n\\xFAmero inteiro\",\n          onChange: this.handleInputNumberChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.renderButtonSubmit = () => {\n      if (this.state.waitingResp) {\n        return React.createElement(CircularProgress, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        });\n      } else {\n        let isValidInt = /^\\d+$/.test(this.state.numberValue);\n        let numberParsed = parseInt(this.state.numberValue);\n        let alreadyCalculated = this.state.results.some(result => result.reqNumber === numberParsed);\n\n        if (isValidInt && numberParsed < 1e8 && !alreadyCalculated) {\n          return React.createElement(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: this.handleSubmitButtonClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          }, \"Calcular\");\n        } else {\n          return React.createElement(Button, {\n            variant: \"contained\",\n            disabled: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }, alreadyCalculated ? \"Já calculado\" : \"Calcular\");\n        }\n      }\n    };\n\n    this.renderResponse = () => {\n      return React.createElement(\"div\", {\n        className: \"results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, this.state.results.map((prevResult, index) => {\n        return React.createElement(\"div\", {\n          key: index,\n          className: \"renderedResult\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          className: \"respInfos\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, prevResult.reqNumber + (prevResult.isPrime ? \" é\" : \" não é\") + \" um número primo. Seus divisores são:\"), React.createElement(\"p\", {\n          className: \"respInfos\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, prevResult.divisors.join(\", \")));\n      }));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: bridge_logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"App-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Desafio Dev. Full Stack\")), React.createElement(\"div\", {\n      className: \"App-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Calcule j\\xE1 os divisores de um n\\xFAmero:\"), this.renderTextField(), React.createElement(\"p\", {\n      className: \"newLine\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), this.renderButtonSubmit(), this.renderResponse()));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/david/Documentos/GitHub/Desafio-Bridge-Full-Stack/client/src/App.js"],"names":["React","Component","bridge_logo","Button","TextField","CircularProgress","App","state","reqResponse","undefined","numberValue","results","waitingResp","handleInputNumberChange","e","setState","target","value","handleSubmitButtonClick","submitNumber","then","res","prevState","express","catch","err","console","log","response","fetch","body","json","status","Error","message","renderTextField","renderButtonSubmit","isValidInt","test","numberParsed","parseInt","alreadyCalculated","some","result","reqNumber","renderResponse","map","prevResult","index","isPrime","divisors","join","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport bridge_logo from './bridge_logo.png';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    reqResponse: undefined,\n    numberValue: undefined,\n    results: [],\n    waitingResp: false\n  };\n\n  handleInputNumberChange = (e) => { this.setState({ numberValue: e.target.value }) }\n\n  handleSubmitButtonClick = () => {\n    this.setState({ waitingResp: true })\n\n    this.submitNumber()\n    .then(res => this.setState(prevState => ({ \n      results: [...prevState.results, res.express],\n      waitingResp: false\n     })))\n    .catch(err => console.log(err));\n  }\n  \n  submitNumber = async () => {\n    const response = await fetch('/api/divisors?number='+this.state.numberValue)\n    const body = await response.json()\n\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n\n    return body\n  }\n\n  renderTextField = () => {\n    if (this.state.numberValue >= 1e8) {\n      return <TextField error id=\"standard-error-helper-text\" label=\"Erro\" helperText=\"Número deve ser < 10^8.\" onChange={ this.handleInputNumberChange }/>\n    } else {\n      return <TextField id=\"standard-basic\" label=\"Insira um número inteiro\" onChange={ this.handleInputNumberChange } />\n    }\n  }\n\n  renderButtonSubmit = () => {\n    if (this.state.waitingResp) {\n      return <CircularProgress />\n    } else {\n      let isValidInt = /^\\d+$/.test(this.state.numberValue)\n      let numberParsed = parseInt(this.state.numberValue)\n      let alreadyCalculated = this.state.results.some(result => result.reqNumber === numberParsed)\n      \n      if (isValidInt && numberParsed < 1e8 && !alreadyCalculated) {\n        return <Button variant=\"contained\" color=\"secondary\" onClick={ this.handleSubmitButtonClick }>Calcular</Button>\n      } else {\n        return <Button variant=\"contained\" disabled>{alreadyCalculated ? \"Já calculado\" : \"Calcular\"}</Button>\n      }\n    }\n  }\n\n  renderResponse = () => {\n    return (\n      <div className=\"results\">\n        {\n          this.state.results.map((prevResult, index) => {\n            return (\n              <div key={index} className=\"renderedResult\">\n                <hr></hr>\n                <p className=\"respInfos\">{prevResult.reqNumber + (prevResult.isPrime ? \" é\" : \" não é\") + \" um número primo. Seus divisores são:\"}</p>\n                <p className=\"respInfos\">{prevResult.divisors.join(\", \")}</p>\n              </div>\n            )\n          })\n        }\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={bridge_logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Desafio Dev. Full Stack</h1>\n        </header>\n        <div className=\"App-body\">\n          <p className=\"App-intro\">Calcule já os divisores de um número:</p>\n          { this.renderTextField() }\n          <p className=\"newLine\"/>\n          { this.renderButtonSubmit() }\n          { this.renderResponse() }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}