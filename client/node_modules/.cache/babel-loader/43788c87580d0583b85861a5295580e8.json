{"ast":null,"code":"var _jsxFileName = \"/home/david/Documentos/GitHub/Desafio-Bridge-Full-Stack/client/src/App.js\";\nimport React, { Component } from 'react';\nimport bridge_logo from './bridge_logo.png';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: '',\n      numberValue: ''\n    };\n\n    this.handleInputNumberChange = e => {\n      let input_value = e.target.value;\n      let input_value_parsed = parseInt(input_value);\n\n      if (isNaN(input_value_parsed)) {\n        this.setState({\n          numberValue: NaN\n        });\n      } else if (input_value === \"\") {\n        this.setState({\n          numberValue: undefined\n        });\n      } else {\n        this.setState({\n          numberValue: input_value\n        });\n      }\n    };\n\n    this.handleSubmitButtonClick = () => {};\n\n    this.submitNumber = async () => {\n      const response = await fetch('/api/divisors');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n  }\n\n  getTextField() {\n    if (this.state.numberValue !== undefined && isNaN(this.state.numberValue)) {\n      return React.createElement(TextField, {\n        error: true,\n        id: \"standard-error-helper-text\",\n        label: \"Erro\",\n        helperText: \"Isso n\\xE3o \\xE9 um n\\xFAmero inteiro.\",\n        onChange: this.handleInputNumberChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(TextField, {\n        id: \"standard-basic\",\n        label: \"Insira um n\\xFAmero inteiro\",\n        onChange: this.handleInputNumberChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: bridge_logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"App-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Desafio Dev. Full Stack\")), React.createElement(\"div\", {\n      className: \"App-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Calcule j\\xE1 os divisores de um n\\xFAmero:\"), this.getTextField(), React.createElement(\"p\", {\n      className: \"newLine\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(Button, {\n      className: \"ButtonCalculate\",\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.validateInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Calcular\"), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, this.state.response)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/david/Documentos/GitHub/Desafio-Bridge-Full-Stack/client/src/App.js"],"names":["React","Component","bridge_logo","Button","TextField","App","state","response","numberValue","handleInputNumberChange","e","input_value","target","value","input_value_parsed","parseInt","isNaN","setState","NaN","undefined","handleSubmitButtonClick","submitNumber","fetch","body","json","status","Error","message","getTextField","render","validateInput"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport bridge_logo from './bridge_logo.png';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    numberValue: ''\n  };\n\n  // componentDidMount() {\n  //   this.callApi()\n  //     .then(res => this.setState({ response: res.express }))\n  //     .catch(err => console.log(err));\n  // }\n\n  handleInputNumberChange = (e) => { \n    let input_value = e.target.value\n    let input_value_parsed = parseInt(input_value)\n\n    if (isNaN(input_value_parsed)) {\n      this.setState({ numberValue: NaN })\n    } else if (input_value === \"\") {\n      this.setState({ numberValue: undefined })\n    } else {\n      this.setState({ numberValue: input_value })\n    }\n  }\n\n  handleSubmitButtonClick = () => {\n    \n  }\n\n  getTextField() {\n    if (this.state.numberValue !== undefined && isNaN(this.state.numberValue)) {\n      return <TextField error id=\"standard-error-helper-text\" label=\"Erro\" helperText=\"Isso não é um número inteiro.\" onChange={ this.handleInputNumberChange } />\n    } else {\n      return <TextField id=\"standard-basic\" label=\"Insira um número inteiro\" onChange={ this.handleInputNumberChange } />\n    }\n  }\n\n  submitNumber = async () => {\n    const response = await fetch('/api/divisors')\n    const body = await response.json()\n\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n\n    return body\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={bridge_logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Desafio Dev. Full Stack</h1>\n        </header>\n        <div className=\"App-body\">\n          <p className=\"App-intro\">Calcule já os divisores de um número:</p>\n          { this.getTextField() }\n          <p className=\"newLine\"/>\n          <Button className=\"ButtonCalculate\" variant=\"contained\" color=\"secondary\" onClick={ this.validateInput }>Calcular</Button>\n\n          <p className=\"App-intro\">{this.state.response}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}